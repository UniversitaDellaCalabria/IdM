import ldap
import os

from collections import OrderedDict

APP_NAME = 'Unical ID'
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
# you can generate a valid one issuing the command:
#       manage.py generate_secret_key
SECRET_KEY = '9nv@u)887fsd89fuasdF_W_$%"!Â£$31249adsf0suw_he9hw20rfya)l!j!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = 1
MANTEINANCE = 0

HOSTNAME = 'idm.testunical.it'
ALLOWED_HOSTS = [HOSTNAME,
                 'ldap.testunical.it',
                 'localhost']

LOGIN_REDIRECT_URL = '/dashboard'

# Application definition
INSTALLED_APPS = [
    # customizzazione gestione degli utenti
    'accounts',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django_admin_multiple_choice_list_filter',
    'django_form_builder',
    'unical_template',
    'sass_processor',
    'bootstrap_italia_template',
    'django_unical_bootstrap_italia',
    'django_form_builder',

    'rangefilter',
    'ldapdb',
    'ldap_peoples',
    'identity',
    'provisioning',

    #'cineca_repl',
    'registration',
]

if 'saml2_sp' in INSTALLED_APPS or \
   'djangosaml2' in INSTALLED_APPS:

    from saml2_sp.pysaml2 import *
    AUTHENTICATION_BACKENDS = (
        'ldap_peoples.auth.LdapAcademiaAuthBackend',
        # FIX TODO in Django 2.1
        # 'django_idm.auth.SessionUniqueBackend',
        'django.contrib.auth.backends.ModelBackend',
        'djangosaml2.backends.Saml2Backend')

    LOGIN_URLNAME = 'djangosaml2:saml2_login'
    LOGIN_URL = '/saml2/login'
else:
    AUTHENTICATION_BACKENDS = [
                            'ldap_peoples.auth.LdapAcademiaAuthBackend',
                            'django.contrib.auth.backends.ModelBackend',
                            # FIX TODO in Django 2.1
                            # 'django_idm.auth.SessionUniqueBackend',
                          ]
    LOGIN_URLNAME = 'provisioning:provisioning_login'
    LOGIN_URL = '/local/login'

if DEBUG:
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SESSION_EXPIRE_AT_BROWSER_CLOSE = False
else:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# The maximum number of parameters that may be received via GET or POST before a
# SuspiciousOperation (TooManyFields) is raised. You can set this to None to disable the check.
DATA_UPLOAD_MAX_NUMBER_FIELDS = 100

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

LDAP_OU = 'people'
LDAP_BASE_DOMAIN = 'testunical.it'
LDAP_BASEDN = 'dc={},dc={}'.format('testunical', 'it')
LDAP_CACERT = os.path.sep.join((BASE_DIR,
                                'certificates',
                                'slapd-cacert.pem'))
LDAP_PEOPLE_DN = 'ou={},{}'.format(LDAP_OU, LDAP_BASEDN)

# Also interesting is their use as values on ldap.OPT_X_TLS_REQUIRE_CERT (TLS equivalent: TLS_REQCERT)
# demand and hard (default):
    # no certificate provided: quits
    # bad certificate provided: quits
# try
    # no certificate provided: continues
    # bad certificate provided: quits
# allow
    # no certificate provided: continues
    # bad certificate provided: continues
# never
    # no certificate is requested

LDAP_CONNECTION_OPTIONS = {
                            # ldap.OPT_REFERRALS: 0,
                            ldap.OPT_PROTOCOL_VERSION: 3,
                            ldap.OPT_DEBUG_LEVEL: 0,
                            ldap.OPT_X_TLS_CACERTFILE: LDAP_CACERT,

                            # force /etc/ldap.conf configuration.
                            ldap.OPT_X_TLS_REQUIRE_CERT: ldap.OPT_X_TLS_DEMAND,
                            ldap.OPT_X_TLS: ldap.OPT_X_TLS_DEMAND,
                            ldap.OPT_X_TLS_DEMAND: True,


                            # a cached connection to be dropped an
                            # recreated after it has been idle for the specified time
                            ldap.OPT_TIMEOUT: 180,

                            # used to check whether a socket is alive
                            ldap.OPT_X_KEEPALIVE_IDLE: 120,
                            ldap.OPT_X_KEEPALIVE_PROBES: 10,
                            ldap.OPT_X_KEEPALIVE_INTERVAL: 30,

                            ldap.OPT_NETWORK_TIMEOUT: 20,
                            ldap.OPT_RESTART: True,
                            #ldap.OPT_ON: True,

                            # ldap.OPT_X_TLS_REQUIRE_CERT: ldap.OPT_X_TLS_NEVER,
                            # ldap.OPT_X_TLS: ldap.OPT_X_TLS_NEVER,
                            # ldap.OPT_X_TLS_DEMAND: False,
                          }

# RAW patch for limiting search_s
LDAP_SEARCH_LIMIT = 5000

DATABASES = {
    'ldap': {
        'ENGINE': 'ldapdb.backends.ldap',
        # only in localhost
        'NAME': 'ldapi:///',
        #'NAME': 'ldaps://ldap.testunical.it',
        # 'NAME': 'ldaps://127.0.0.1/',
        'USER': 'cn=admin,{}'.format(LDAP_BASEDN),
        'PASSWORD': 'slapdsecret',
        'PORT': 636,
        #'TLS': True,
        'RETRY_DELAY': 8,
        'RETRY_MAX': 3,
        'CONNECTION_OPTIONS': LDAP_CONNECTION_OPTIONS
     },
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
    # 'default': {
        # 'ENGINE': 'django.db.backends.mysql',
        # 'NAME': 'identity',
        # 'HOST': 'localhost',
        # 'USER': 'thatuser',
        # 'PASSWORD': 'thatpassword',
        # 'PORT': '',
        # 'TEST': {
            # 'NAME': 'identity_test',
        # },
    # }
}

DATABASE_ROUTERS = ['ldapdb.router.Router']

LANGUAGE_CODE = 'it-it'
TIME_ZONE = 'Europe/Rome'

# for debugginf purpose only
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# EMAIL_HOST = 'smtp.thathost.it'
# EMAIL_HOST_USER = 'myemail@hotmail.com'
# EMAIL_HOST_PASSWORD = 'mypassword'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = 'that-noreply@unical.it'
SERVER_EMAIL = DEFAULT_FROM_EMAIL

# deprecated?
#EMAIL_SEND_TOKEN = True
ADMINS = [('That guy', 'thatguy@testunical.it'),]

# DEPRECATED, use Cineca Esse3 and CSA API instead of Oracle DB
CINECA_DB_URL = "oracle://thatuser:thatguy@192.168.1.3:1521/DBVISTE"


LOGGING = {
    'version': 1,
    #'root': {'level': 'DEBUG' if DEBUG else 'INFO'},
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s [%(asctime)s] %(module)s %(message)s'
         },
         'detailed': {
            'format': '[%(asctime)s] %(message)s [(%(levelname)s)] %(name)s.%(funcName)s:%(lineno)s]'
        },
    },
    'handlers': {
        'console': {
        # 'level': 'DEBUG' if DEBUG else 'INFO',
        'class': 'logging.StreamHandler',
        'formatter': 'detailed'
        },
        # 'file': {
            # 'class': 'logging.handlers.RotatingFileHandler',
            # 'formatter': 'verbose',
            # 'filename': '/tmp/django-unical_ict-error-handler.log',
            # 'maxBytes': 1024000,
            # 'backupCount': 3,
        # },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        # disables Invalid HTTP_HOST header emails
        'django.security.DisallowedHost': {
                'handlers': ['mail_admins'],
                'level': 'CRITICAL',
                'propagate': False,
        },
        'django': {
            'handlers': [#'file',
                         'console','mail_admins'],
            'propagate': True,
            'level': 'INFO',
        },
        'ldap_peoples': {
            'handlers': [#'file',
                         'console',],
            'propagate': True,
            'level': 'INFO',
        },
        'identity': {
            'handlers': [#'file',
                         'console',],
            'propagate': True,
            'level': 'INFO',
        },
        'provisioning': {
            'handlers': [#'file',
                         'console',],
            'propagate': True,
            'level': 'INFO',
        },
    }
}

# prints to stdout when test runs
NOSE_ARGS = ['--nocapture',
             '--nologcapture',]


DJANGO_FORM_BUILDER_FIELDS = OrderedDict([
     ('mail', ('CustomEmailField', {'label': 'Email',
                                    'required': True,
                                    'help_text': 'name.surname@testunical.it, comunque l\'email utilizzata in fase di registrazione. '}, '')),
     ('telephoneNumber', ('CustomCharField', {'label': 'Telefono',
                                              'required': True,
                                              'help_text': ''}, '')),
     ('cn', ('CustomCharField', {'label': 'Common name',
                                          'required': True,
                                          'help_text': ''}, '')),
     ('displayName', ('CustomCharField', {'label': 'Display name',
                                          'required': True,
                                          'help_text': ''}, '')),
 ])
